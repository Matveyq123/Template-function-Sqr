#include <iostream>
#include <vector>
#include <map>
#include <sstream>
#include <utility>
#include <string>


template <typename First, typename Second>
std::ostream& operator << (std::ostream& out, const std::pair<First, Second>& p); // overloaded operator for pair

template <typename T>
std::ostream& operator << (std::ostream& out, const std::vector<T>& vi); // overloaded operator for vector

template <typename Key, typename Value> 
std::ostream& operator << (std::ostream& out, const std::map<Key, Value>& m); // overloaded operator for map

template <typename Collection> // function for more readible output
std::string Join(const Collection& c, char d) {
    std::stringstream ss;
    bool first = true;
    for (const auto& i : c) {
        if (!first) {
            ss << d;
        }
        first = false;
        ss << i;
    }
    return ss.str();
}

template <typename First, typename Second>
std::ostream& operator << (std::ostream& out, const std::pair<First, Second>& p) {
    return out << '(' << p.first << ',' << p.second << ')';
}

template <typename T>
std::ostream& operator << (std::ostream& out, const std::vector<T>& vi) {
    return out << '[' << Join(vi, ',') << ']';
}

template <typename Key, typename Value>
std::ostream& operator << (std::ostream& out, const std::map<Key, Value>& m) {
    return out << '{' << Join(m, ',') << '}';
}

int main() { //Test function
    std::vector<double> vi = { 1.4, 2, 3 };
    std::cout << vi << std::endl;
    std::map<int, double> m = { {1, 2.5}, {3, 4} };
    std::cout << m << std::endl;
    std::vector<std::vector<int>> v = { {1, 2}, {3, 4} };
    std::cout << v << std::endl;
    return 0;
}

#include <iostream>
#include <vector>
#include <map>
#include <utility>

template <typename T> T Sqr(T value); //template function for numbers
template<typename Vec> std::vector<Vec> Sqr(const std::vector<Vec>& v); //template function for vector 
template<typename First, typename Second> std::pair<First, Second> Sqr(const std::pair<First, Second>& p); //template function for pair
template<typename Key, typename Value> std::map<Key, Value> Sqr(const std::map<Key, Value>& m); //template function for map
 
template<typename T> 
T Sqr(T value) {
    return value * value;
}

template<typename Vec>
std::vector<Vec> Sqr(const std::vector<Vec>& v) {
    std::vector<Vec> result;
    for (const Vec& i : v) {
        result.push_back(Sqr(i));
    }
    return result;
}
template<typename First, typename Second>
std::pair<First, Second> Sqr(const std::pair<First, Second>& p) {
    std::pair<First, Second> result;
    result.first = Sqr(p.first);
    result.second =Sqr(p.second);
    return result;
}
template<typename Key, typename Value>
std::map<Key, Value> Sqr(const std::map<Key, Value>& m) {
    std::map<Key, Value> result;
    for (const auto& item : m) {
        result[item.first] = Sqr(item.second);
    }
    return result;
}

int main() {//Test function
    std::vector<int> v = { 1, 2, 3 };
    std::cout << "vector:";
    for (int x : Sqr(v)) {
        std::cout << ' ' << x;
    }
    std::cout << std::endl;

    std::map<int, std::pair<int, int>> map_of_pairs = {
      {4, {2, 2}},
      {7, {4, 3}}
    };
    std::cout << "map of pairs:" << std::endl;
    for (const auto& x : Sqr(map_of_pairs)) {
        std::cout << x.first << ' ' << x.second.first << ' ' << x.second.second << std::endl;
    }

    return 0;
}
